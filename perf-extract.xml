# Metal Kernel Analysis Prompt

<PURPOSE>
The purpose of this LLM is to analyze two Metal kernel execution logs (optimized and unoptimized), extract relevant performance metrics, and generate a standardized markdown documentation that compares overall performance and highlights the impact of kernel optimizations, with particular attention to shape transformations and execution time improvements.
</PURPOSE>

<INSTRUCTIONS>
<INSTRUCTION>For each kernel execution log:
- Extract kernel identifiers
- Record shape configurations
- Note memory usage
- Track execution time
- Document compute performance (GFLOPS)
- Record memory bandwidth
- List operations performed</INSTRUCTION>

<INSTRUCTION>For each version (optimized and non-optimized):
- Sum up total execution times
- List all kernels with their respective metrics
- Present in table format matching tinygrad output style</INSTRUCTION>

<INSTRUCTION>Extract memory transfer operations by finding lines containing:
- Operation type (e.g., CLANG → NPY)
- Data size
- Duration
- Memory usage</INSTRUCTION>

<INSTRUCTION>Calculate overall performance metrics:
- Speed-up factor = total_unoptimized_time / total_optimized_time
- Total time reduction = total_unoptimized_time - total_optimized_time
- Overall improvement percentage = (total_time_reduction / total_unoptimized_time) * 100</INSTRUCTION>

<INSTRUCTION>Document key observations:
- Note shape transformations
- Highlight performance changes
- Track memory footprint consistency
- Note computational efficiency improvements</INSTRUCTION>
</INSTRUCTIONS>

<OUTPUT-FORMAT>
# Metal Kernel Analysis Documentation

## 1. Non-Optimized Kernel Run (hc)

| Kernel ID           | Shape               | Memory | Time      | GFLOPS | Bandwidth (GB/s) | Operations |
|--------------------|---------------------|--------|-----------|---------|-----------------|------------|
| [kernel_id]        | [dimensions]        | [mem]  | [time]    | [gflops]| [bandwidth]     | [ops]      |
| **Total Time**     |                     |        | [sum_time]|         |                 |            |

## 2. BEAM Optimized Run (beam99)

| Kernel ID           | Shape               | Memory | Time      | GFLOPS | Bandwidth (GB/s) | Operations |
|--------------------|---------------------|--------|-----------|---------|-----------------|------------|
| [kernel_id]        | [dimensions]        | [mem]  | [time]    | [gflops]| [bandwidth]     | [ops]      |
| **Total Time**     |                     |        | [sum_time]|         |                 |            |

## 3. Memory Transfer Operations

| Operation       | Size   | Duration (μs) | Memory (GB) |
|----------------|--------|---------------|-------------|
| [op_type]      | [size] | [duration]    | [memory]    |

## 4. Overall Performance Comparison

| Metric           | Value     | Notes                                    |
|-----------------|-----------|------------------------------------------|
| Speed-up Factor | [factor]  | Total execution time improvement         |
| Time Reduction  | [time]    | Absolute time saved                      |
| Improvement %   | [percent] | Percentage reduction in execution time    |
| Memory Impact   | [impact]  | Memory footprint comparison              |

## 5. Key Observations

- [Shape transformation observations]
- [Performance improvement notes]
- [Memory usage observations]
- [Computational efficiency notes]
</OUTPUT-FORMAT>

<EXAMPLE>
# Metal Kernel Analysis Documentation

## 1. Non-Optimized Kernel Run (hc)

| Kernel ID           | Shape               | Memory | Time      | GFLOPS | Bandwidth (GB/s) | Operations |
|--------------------|---------------------|--------|-----------|---------|-----------------|------------|
| r_360_32_4_4_3_3_3_4 | 135 × 40 × 8 × 16  | 0.02 GB | 3685.89 μs| -       | -               | conv2d     |
| r_180_15_32_4_2_3_3_3_2 | 135 × 40 × 8 × 16  | 0.02 GB | 4329.22 μs| -       | -               | conv2d, sqrt, add, pow |
| **Total Time**     |                     |        | 8015.11 μs|         |                 |            |

## 2. BEAM Optimized Run (beam99)

| Kernel ID           | Shape               | Memory | Time      | GFLOPS | Bandwidth (GB/s) | Operations |
|--------------------|---------------------|--------|-----------|---------|-----------------|------------|
| r_360_32_4_4_3_3_3_4 | 360 × 32 × 4 × 4   | 0.02 GB | 638.12 μs | 60.00   | 26.5/60.0       | conv2d     |
| r_180_15_32_4_2_3_3_3_2 | 180 × 15 × 32 × 4  | 0.02 GB | 721.77 μs | 109.54  | 31.3/113.0      | conv2d, sqrt, add, pow |
| **Total Time**     |                     |        | 1359.89 μs|         |                 |            |

## 3. Memory Transfer Operations

| Operation       | Size   | Duration (μs) | Memory (GB) |
|----------------|--------|---------------|-------------|
| CLANG → NPY    | 8.29M  | 5762.38      | 0.02        |
| METAL → NPY    | 8.29M  | 5558.88      | 0.02        |
| METAL → NPY    | 36B    | 73.76        | 0.01        |
| METAL → NPY    | 36B    | 33.67        | 0.01        |
| CLANG → METAL  | 8.29M  | 5241.25      | 0.03        |

## 4. Overall Performance Comparison

| Metric           | Value     | Notes                                    |
|-----------------|-----------|------------------------------------------|
| Speed-up Factor | 5.89×     | Total execution time improvement         |
| Time Reduction  | 6655.22 μs| Absolute time saved                      |
| Improvement %   | 83.0%     | Percentage reduction in execution time    |
| Memory Impact   | None      | Same memory footprint in both versions   |

## 5. Key Observations

- BEAM optimization transforms kernel shapes while maintaining functionality:
  - First kernel: 135×40×8×16 → 360×32×4×4
  - Second kernel: 135×40×8×16 → 180×15×32×4
- Overall execution time reduced by 83%
- Memory footprint remains constant at 0.02 GB per kernel
- Shape transformation enables better compute utilization:
  - First kernel achieves 60.00 GFLOPS
  - Second kernel reaches 109.54 GFLOPS with additional operations
- Memory bandwidth utilization improves significantly with optimization
- Both kernels maintain the same memory requirements despite reshaping
</EXAMPLE>
